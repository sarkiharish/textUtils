{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Harish\\\\Desktop\\\\CWH\\\\textutils\\\\src\\\\components\\\\TextForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextForm(props) {\n  _s();\n\n  const [text, setText] = useState(\"\");\n\n  const changeToUppercase = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n  };\n\n  const changeToLowercase = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n  };\n\n  const clearText = () => {\n    let newText = '';\n    setText(newText);\n  }; // const onTranslate = () => {    \n  //     var options =    \n  //      {    \n  //       sourceLanguage:    \n  //       google.elements.transliteration.LanguageCode.ENGLISH,    \n  //       destinationLanguage:    \n  //       google.elements.transliteration.LanguageCode.HINDI,    \n  //       shortcutKey:    \n  //        'ctrl+g',    \n  //        transliterationEnabled:    \n  //         true    \n  //       };  \n  //  }  \n\n\n  const onCapitalize = () => {\n    //    if(text.length===0){\n    //        console.log(\"Please enter text first.\");\n    //    }\n    const words = text.split(\" \");\n\n    for (let i = 0; i < words.length; i++) {\n      words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n    }\n\n    setText(words.join(\" \"));\n  };\n\n  const onCapitalizeSelectedText = () => {\n    if (window.getSelection) {\n      let seletedText = window.getSelection().toString();\n\n      if (seletedText) {\n        let newText = text.replace(seletedText, seletedText.toUpperCase());\n        setText(newText);\n      }\n    }\n  }; // const onChangeTheme = () => {\n  //     let bgcolor = document.querySelector('.body').style.backgroundCOlor;\n  //     if(bgcolor==='black'){\n  //         document.querySelector('.body').style.color=\"white\"\n  //     }else{\n  //         document.querySelector('.body').style.color=\"black\"\n  //     }\n  // }\n\n\n  const handleCopy = () => {\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n  };\n\n  const handleExraSpaces = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n  };\n\n  const changeHandle = event => {\n    setText(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        color: props.mode === 'dark' ? 'white' : 'black'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          value: text,\n          onChange: changeHandle,\n          style: {\n            backgroundColor: props.mode === 'dark' ? 'grey' : 'white',\n            color: props.mode === 'dark' ? 'white' : 'black'\n          },\n          id: \"myBox\",\n          rows: \"8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-1\",\n        onClick: changeToUppercase,\n        children: \"Convert to UpperCase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-1\",\n        onClick: changeToLowercase,\n        children: \"Convert to LowerCase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-1\",\n        onClick: clearText,\n        children: \"Clear Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-1\",\n        onClick: onCapitalize,\n        children: \"Capitalize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-1 my-1\",\n        onClick: onCapitalizeSelectedText,\n        children: \"Capitalize Selected Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-1\",\n        onClick: handleCopy,\n        children: \"Copy Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-1\",\n        onClick: handleExraSpaces,\n        children: \"Remove Extra Spaces\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      style: {\n        color: props.mode === 'dark' ? 'white' : 'black'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Text Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [text.split(\" \").length, \" Words and \", text.length, \" characters.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Can be read in \", 0.008 * text.split(\"\").length, \" minutes.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: text.length > 0 ? text : \"Enter Something in the Textbox above to preview here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TextForm, \"3t0DFnMi16eB/7p7iIKtjG5r68g=\");\n\n_c = TextForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextForm\");","map":{"version":3,"sources":["C:/Users/Harish/Desktop/CWH/textutils/src/components/TextForm.js"],"names":["React","useState","TextForm","props","text","setText","changeToUppercase","newText","toUpperCase","changeToLowercase","toLowerCase","clearText","onCapitalize","words","split","i","length","substr","join","onCapitalizeSelectedText","window","getSelection","seletedText","toString","replace","handleCopy","document","getElementById","select","navigator","clipboard","writeText","value","handleExraSpaces","changeHandle","event","target","color","mode","heading","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const changeToUppercase = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const changeToLowercase = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const clearText = () => {\r\n        let newText = ('');\r\n        setText(newText);\r\n    }\r\n\r\n    // const onTranslate = () => {    \r\n    //     var options =    \r\n    //      {    \r\n    //       sourceLanguage:    \r\n    //       google.elements.transliteration.LanguageCode.ENGLISH,    \r\n    //       destinationLanguage:    \r\n    //       google.elements.transliteration.LanguageCode.HINDI,    \r\n    //       shortcutKey:    \r\n    //        'ctrl+g',    \r\n    //        transliterationEnabled:    \r\n    //         true    \r\n    //       };  \r\n    //  }  \r\n\r\n    const onCapitalize = () => {\r\n    //    if(text.length===0){\r\n    //        console.log(\"Please enter text first.\");\r\n    //    }\r\n        \r\n       const words = text.split(\" \");\r\n       \r\n\r\n        for (let i = 0; i < words.length; i++) {\r\n            words[i] = words[i][0].toUpperCase() + words[i].substr(1);\r\n        }\r\n        setText(words.join(\" \"));\r\n    }\r\n\r\n    const onCapitalizeSelectedText = () => {\r\n        if(window.getSelection){\r\n            let seletedText = window.getSelection().toString();\r\n\r\n            if(seletedText){\r\n                let newText = text.replace(seletedText, seletedText.toUpperCase());\r\n                setText(newText);\r\n            }\r\n        }\r\n    }\r\n\r\n    // const onChangeTheme = () => {\r\n    //     let bgcolor = document.querySelector('.body').style.backgroundCOlor;\r\n    //     if(bgcolor==='black'){\r\n    //         document.querySelector('.body').style.color=\"white\"\r\n    //     }else{\r\n    //         document.querySelector('.body').style.color=\"black\"\r\n    //     }\r\n    // }\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    const handleExraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    const changeHandle = (event) => {\r\n        setText(event.target.value);\r\n    } \r\n\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={changeHandle} style={{backgroundColor:props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={changeToUppercase}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={changeToLowercase}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={clearText}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={onCapitalize}>Capitalize</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={onCapitalizeSelectedText}>Capitalize Selected Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExraSpaces}>Remove Extra Spaces</button>\r\n            {/* <button className=\"btn btn-primary mx-1 my-1\" onClick={onChangeTheme}>Change Theme</button> */}\r\n        </div>\r\n\r\n        <div className=\"container my-3\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n            <h2>Text Summary</h2>\r\n            <p>{text.split(\" \").length} Words and {text.length} characters.</p>\r\n            <p>Can be read in {0.008 * text.split(\"\").length} minutes.</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter Something in the Textbox above to preview here.\"}</p>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}